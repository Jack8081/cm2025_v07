<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\loader\cuckoo\loader.elf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\loader\cuckoo\loader.elf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 28 09:48:53 2023
<BR><P>
<H3>Maximum Stack Usage =        596 bytes</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pattern_main &rArr; test_dispatch &rArr; test_load_code &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>pattern_main</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ap_autotest_main.o(.entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = pattern_main &rArr; test_dispatch &rArr; test_load_code &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[5]"></a>act_log_to_pc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_autotest_common.o(.text.act_log_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_log_to_pc &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[7]"></a>att_buf_printf</STRONG> (Thumb, 412 bytes, Stack size 208 bytes, ap_autotest_print.o(.text.att_buf_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[3]"></a>att_printf</STRONG> (Thumb, 54 bytes, Stack size 168 bytes, ap_autotest_extern_function.o(.text.att_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[9]"></a>att_vsnprintf</STRONG> (Thumb, 584 bytes, Stack size 68 bytes, ap_autotest_extern_function.o(.text.att_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[16]"></a>clk_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, soc_clock.o(.text.clk_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[12]"></a>free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.free))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[11]"></a>k_sleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.k_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_stub_idle
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[8]"></a>k_uptime_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.k_uptime_get))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[d]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.malloc))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[13]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text.memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
</UL>

<P><STRONG><a name="[1]"></a>memset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text.memset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[15]"></a>read_atf_sub_file</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.read_atf_sub_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_atf_sub_file
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
</UL>

<P><STRONG><a name="[b]"></a>reset_and_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soc_reset.o(.text.reset_and_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[14]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, string.o(.text.strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
</UL>

<P><STRONG><a name="[f]"></a>stub_read_packet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.stub_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stub_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[17]"></a>stub_status_inquiry</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.stub_status_inquiry))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_stub_idle
</UL>

<P><STRONG><a name="[6]"></a>stub_write_packet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.stub_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
</UL>

<P><STRONG><a name="[4]"></a>test_dispatch</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, ap_autotest_fsm.o(.text.test_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = test_dispatch &rArr; test_load_code &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_stub_idle
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_load_code
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_read_packet
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sleep
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[10]"></a>test_load_code</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, ap_autotest_fsm.o(.text.test_load_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = test_load_code &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atf_sub_file
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>

<P><STRONG><a name="[2]"></a>uart_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, soc_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[a]"></a>uart_puts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soc_uart.o(.text.uart_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_puts &rArr; uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[c]"></a>udelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.udelay))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
</UL>

<P><STRONG><a name="[e]"></a>wait_until_stub_idle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ap_autotest_common.o(.text.wait_until_stub_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_until_stub_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_status_inquiry
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dispatch
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
