<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\group1\mp_test\cuckoo\p05_rx.elf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\group1\mp_test\cuckoo\p05_rx.elf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 28 09:49:10 2023
<BR><P>
<H3>Maximum Stack Usage =        636 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pattern_main &rArr; act_test_read_rf_rx_arg &rArr; analyze_mp_test_para &rArr; act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">att_printf</a> from ap_autotest_extern_function.o(.text.att_printf) referenced from mp_ipmsg.o(.text.ipmsg_btc_update_bt_table)
 <LI><a href="#[0]">att_printf</a> from ap_autotest_extern_function.o(.text.att_printf) referenced from mp_ipmsg.o(.text.mp_btc_ipmsg_init)
 <LI><a href="#[0]">att_printf</a> from ap_autotest_extern_function.o(.text.att_printf) referenced from mp_core_load.o(.text.mp_btc_mem_init)
 <LI><a href="#[0]">att_printf</a> from ap_autotest_extern_function.o(.text.att_printf) referenced from rbuf_pool.o(.text.rbuf_pool_init)
 <LI><a href="#[0]">att_printf</a> from ap_autotest_extern_function.o(.text.att_printf) referenced from soc_cmu.o(.text.soc_set_hosc_cap)
 <LI><a href="#[2]">btc_log_handler</a> from mp_ipmsg.o(.text.btc_log_handler) referenced from mp_ipmsg.o(.text.mp_btc_log_buf_process)
 <LI><a href="#[1]">rbuf_pool_alloc</a> from rbuf_pool.o(.text.rbuf_pool_alloc) referenced from mp_ipmsg.o(.text.mp_btc_ipmsg_init)
 <LI><a href="#[3]">search_cmd</a> from mp_txrx_cmd.o(.text.search_cmd) referenced from mp_txrx_cmd.o(.text.mp_btc_rx_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>pattern_main</STRONG> (Thumb, 960 bytes, Stack size 64 bytes, ap_autotest_rf_rx.o(.entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = pattern_main &rArr; act_test_read_rf_rx_arg &rArr; analyze_mp_test_para &rArr; act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_deinit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_check_need_adjust_cfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_stop
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_begin
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_rf_rx_result
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_rf_rx_arg
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_trim_cap
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_trim_cap
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[16]"></a>act_log_to_pc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_autotest_common.o(.text.act_log_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_log_to_pc &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[18]"></a>act_test_read_arg</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ap_autotest_read_args.o(.text.act_test_read_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_mp_test_para
</UL>

<P><STRONG><a name="[6]"></a>act_test_read_rf_rx_arg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ap_autotest_porting.o(.text.act_test_read_rf_rx_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = act_test_read_rf_rx_arg &rArr; analyze_mp_test_para &rArr; act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_mp_test_para
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[1a]"></a>act_test_report_result</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_autotest_common.o(.text.act_test_report_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_test_report_result &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_rf_rx_result
</UL>

<P><STRONG><a name="[12]"></a>act_test_report_rf_rx_result</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ap_autotest_porting.o(.text.act_test_report_rf_rx_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = act_test_report_rf_rx_result &rArr; act_test_report_result &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_result
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[19]"></a>analyze_mp_test_para</STRONG> (Thumb, 192 bytes, Stack size 112 bytes, ap_autotest_porting.o(.text.analyze_mp_test_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = analyze_mp_test_para &rArr; act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_arg
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_rf_rx_arg
</UL>

<P><STRONG><a name="[9]"></a>att_bttool_rx_begin</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mp_rx_process.o(.text.att_bttool_rx_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = att_bttool_rx_begin &rArr; mp_btc_rx_init &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
</UL>

<P><STRONG><a name="[b]"></a>att_bttool_rx_stop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mp_rx_process.o(.text.att_bttool_rx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = att_bttool_rx_stop &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
</UL>

<P><STRONG><a name="[e]"></a>att_buf_printf</STRONG> (Thumb, 412 bytes, Stack size 208 bytes, ap_autotest_print.o(.text.att_buf_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_arg
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_check_need_adjust_cfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel
</UL>

<P><STRONG><a name="[8]"></a>att_check_need_adjust_cfo</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ap_autotest_rf_rx.o(.text.att_check_need_adjust_cfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = att_check_need_adjust_cfo &rArr; att_cfo_read_test &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_read
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[0]"></a>att_printf</STRONG> (Thumb, 54 bytes, Stack size 168 bytes, ap_autotest_extern_function.o(.text.att_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rx_packet_dealwith
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_analyse_cfo_result
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_mp_test_para
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_get_report
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_read
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_trim_cap
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_calc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_hardware_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_core_load
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buf
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_pool_alloc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_log_buf_process
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipmsg_btc_update_bt_table
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btc_log_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_efuse_freq_value
</UL>
<BR>[Address Reference Count : 5]<UL><LI> mp_ipmsg.o(.text.ipmsg_btc_update_bt_table)
<LI> mp_ipmsg.o(.text.mp_btc_ipmsg_init)
<LI> soc_cmu.o(.text.soc_set_hosc_cap)
<LI> rbuf_pool.o(.text.rbuf_pool_init)
<LI> mp_core_load.o(.text.mp_btc_mem_init)
</UL>
<P><STRONG><a name="[c]"></a>att_read_trim_cap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ap_autotest_rf_rx_cfo_trim.o(.text.att_read_trim_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = att_read_trim_cap &rArr; freq_compensation_read &rArr; read_efuse_freq_value &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_hosc_cap
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[22]"></a>att_vsnprintf</STRONG> (Thumb, 584 bytes, Stack size 68 bytes, ap_autotest_extern_function.o(.text.att_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[f]"></a>att_write_trim_cap</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ap_autotest_rf_rx_cfo_trim.o(.text.att_write_trim_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = att_write_trim_cap &rArr; freq_compensation_write &rArr; write_efuse_new_value &rArr; soc_atp_set_hosc_calib &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_read
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[27]"></a>btdrv_send</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mp_ipmsg.o(.text.btdrv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_stop
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_begin
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_get_report
</UL>

<P><STRONG><a name="[51]"></a>clk_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, soc_clock.o(.text.clk_enable))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1c]"></a>free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.free))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_rf_rx_result
</UL>

<P><STRONG><a name="[21]"></a>freq_compensation_read</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, compensation.o(.text.freq_compensation_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = freq_compensation_read &rArr; read_efuse_freq_value &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_efuse_freq_value
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_check_need_adjust_cfo
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_trim_cap
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_trim_cap
</UL>

<P><STRONG><a name="[25]"></a>freq_compensation_write</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, compensation.o(.text.freq_compensation_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = freq_compensation_write &rArr; write_efuse_new_value &rArr; soc_atp_set_hosc_calib &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_efuse_new_value
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_efuse_freq_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_trim_cap
</UL>

<P><STRONG><a name="[2b]"></a>ipmsg_btc_update_bt_table</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.ipmsg_btc_update_bt_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ipmsg_btc_update_bt_table &rArr; soc_atp_get_rf_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_get_rf_calib
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_put_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
</UL>

<P><STRONG><a name="[1f]"></a>k_uptime_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.k_uptime_get))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[1b]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.malloc))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_rf_rx_result
</UL>

<P><STRONG><a name="[26]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text.memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_data
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btc_log_handler
</UL>

<P><STRONG><a name="[5]"></a>memset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text.memset))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_mem_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_efuse_freq_value
</UL>

<P><STRONG><a name="[2e]"></a>mp_analyse_cfo_result</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mp_rx_process.o(.text.mp_analyse_cfo_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mp_analyse_cfo_result &rArr; mp_rx_packet_dealwith &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rx_packet_dealwith
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_process
</UL>

<P><STRONG><a name="[30]"></a>mp_bt_packet_receive_process</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mp_rx_process.o(.text.mp_bt_packet_receive_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mp_bt_packet_receive_process &rArr; mp_analyse_cfo_result &rArr; mp_rx_packet_dealwith &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_read_hci_data
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_analyse_cfo_result
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
</UL>

<P><STRONG><a name="[32]"></a>mp_bt_packet_receive_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp_rx_process.o(.text.mp_bt_packet_receive_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mp_bt_packet_receive_start &rArr; mp_btc_rx_begin &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
</UL>

<P><STRONG><a name="[34]"></a>mp_bt_packet_receive_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mp_rx_process.o(.text.mp_bt_packet_receive_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mp_bt_packet_receive_stop &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_clear_hci_rx_buffer
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
</UL>

<P><STRONG><a name="[36]"></a>mp_bt_rx_report</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mp_rx_process.o(.text.mp_bt_rx_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mp_bt_rx_report &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_rx_stop
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_get_report
</UL>

<P><STRONG><a name="[35]"></a>mp_btc_clear_hci_rx_buffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.mp_btc_clear_hci_rx_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mp_btc_clear_hci_rx_buffer &rArr; mp_btc_log_buf_process &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_finish
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_claim
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_log_buf_process
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_stop
</UL>

<P><STRONG><a name="[3b]"></a>mp_btc_core_load</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, mp_core_load.o(.text.mp_btc_core_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mp_btc_core_load &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_atf_sub_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
</UL>

<P><STRONG><a name="[11]"></a>mp_btc_deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mp_core_load.o(.text.mp_btc_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[37]"></a>mp_btc_get_report</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mp_txrx_cmd.o(.text.mp_btc_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mp_btc_get_report &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_rx_report
</UL>

<P><STRONG><a name="[3d]"></a>mp_btc_hardware_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, mp_core_load.o(.text.mp_btc_hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mp_btc_hardware_init &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
</UL>

<P><STRONG><a name="[7]"></a>mp_btc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mp_core_load.o(.text.mp_btc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mp_btc_init &rArr; ipmsg_btc_update_bt_table &rArr; soc_atp_get_rf_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_mem_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_hardware_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_core_load
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipmsg_btc_update_bt_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[3f]"></a>mp_btc_ipmsg_init</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, mp_ipmsg.o(.text.mp_btc_ipmsg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mp_btc_ipmsg_init &rArr; mp_btc_log_buf_process &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_put_finish
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_put_claim
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_pool_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_log_buf_process
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
</UL>

<P><STRONG><a name="[38]"></a>mp_btc_log_buf_process</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.mp_btc_log_buf_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = mp_btc_log_buf_process &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_hdl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_read_hci_data
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_clear_hci_rx_buffer
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
</UL>

<P><STRONG><a name="[3e]"></a>mp_btc_mem_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mp_core_load.o(.text.mp_btc_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mp_btc_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_init
</UL>

<P><STRONG><a name="[31]"></a>mp_btc_read_hci_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.mp_btc_read_hci_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mp_btc_read_hci_data &rArr; mp_btc_log_buf_process &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_log_buf_process
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_process
</UL>

<P><STRONG><a name="[33]"></a>mp_btc_rx_begin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mp_txrx_cmd.o(.text.mp_btc_rx_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mp_btc_rx_begin &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_start
</UL>

<P><STRONG><a name="[1d]"></a>mp_btc_rx_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mp_txrx_cmd.o(.text.mp_btc_rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mp_btc_rx_init &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_begin
</UL>

<P><STRONG><a name="[1e]"></a>mp_btc_rx_stop</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mp_txrx_cmd.o(.text.mp_btc_rx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_rx_report
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_stop
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_stop
</UL>

<P><STRONG><a name="[2f]"></a>mp_rx_packet_dealwith</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, mp_rx_process.o(.text.mp_rx_packet_dealwith))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mp_rx_packet_dealwith &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_analyse_cfo_result
</UL>

<P><STRONG><a name="[45]"></a>mp_task_rx_get_report</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ap_autotest_rf_rx_mp_mamager.o(.text.mp_task_rx_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mp_task_rx_get_report &rArr; mp_bt_rx_report &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_rx_report
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
</UL>

<P><STRONG><a name="[46]"></a>mp_task_rx_start</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ap_autotest_rf_rx_mp_mamager.o(.text.mp_task_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mp_task_rx_start &rArr; mp_bt_packet_receive_stop &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_stop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_start
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_bt_packet_receive_process
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
</UL>

<P><STRONG><a name="[39]"></a>rbuf_get_claim</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, rbuf_core.o(.text.rbuf_get_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rbuf_get_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_clear_hci_rx_buffer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_data
</UL>

<P><STRONG><a name="[3a]"></a>rbuf_get_finish</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rbuf_core.o(.text.rbuf_get_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbuf_get_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_rbuf_space
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_clear_hci_rx_buffer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_hdl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_data
</UL>

<P><STRONG><a name="[43]"></a>rbuf_get_hdl</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rbuf_core.o(.text.rbuf_get_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rbuf_get_hdl &rArr; rbuf_get_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_finish
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_log_buf_process
</UL>

<P><STRONG><a name="[48]"></a>rbuf_init_buf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rbuf_core.o(.text.rbuf_init_buf))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_pool_alloc
</UL>

<P><STRONG><a name="[1]"></a>rbuf_pool_alloc</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, rbuf_pool.o(.text.rbuf_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rbuf_pool_alloc &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_init_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mp_ipmsg.o(.text.mp_btc_ipmsg_init)
</UL>
<P><STRONG><a name="[40]"></a>rbuf_pool_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rbuf_pool.o(.text.rbuf_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
</UL>

<P><STRONG><a name="[41]"></a>rbuf_put_claim</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, rbuf_core.o(.text.rbuf_put_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rbuf_put_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
</UL>

<P><STRONG><a name="[42]"></a>rbuf_put_finish</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rbuf_core.o(.text.rbuf_put_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbuf_put_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_rbuf_space
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_ipmsg_init
</UL>

<P><STRONG><a name="[3c]"></a>read_atf_sub_file</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.read_atf_sub_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_atf_sub_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_core_load
</UL>

<P><STRONG><a name="[4a]"></a>reset_and_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soc_reset.o(.text.reset_and_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[4c]"></a>rf_rx_ber_rssi_calc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ap_autotest_rf_rx_rssi_calc.o(.text.rf_rx_ber_rssi_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_rx_ber_rssi_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
</UL>

<P><STRONG><a name="[10]"></a>rf_rx_ber_test_channel</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ap_autotest_rf_rx_ber_rssi_process.o(.text.rf_rx_ber_test_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rf_rx_ber_test_channel &rArr; mp_task_rx_get_report &rArr; mp_bt_rx_report &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_rssi_calc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_get_report
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_set_hosc_cap
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[4d]"></a>rf_rx_cfo_calc</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, ap_autotest_rf_rx_cfo_calc.o(.text.rf_rx_cfo_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rf_rx_cfo_calc &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
</UL>

<P><STRONG><a name="[a]"></a>rf_rx_cfo_test_channel</STRONG> (Thumb, 680 bytes, Stack size 88 bytes, ap_autotest_rf_rx_cfo_process.o(.text.rf_rx_cfo_test_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rf_rx_cfo_test_channel &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[20]"></a>rf_rx_cfo_test_channel_once</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ap_autotest_rf_rx_cfo_process.o(.text.rf_rx_cfo_test_channel_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rf_rx_cfo_test_channel_once &rArr; mp_task_rx_start &rArr; mp_bt_packet_receive_stop &rArr; mp_btc_rx_stop &rArr; btdrv_send &rArr; send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_set_hosc_cap
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_calc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_task_rx_start
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_cfo_read_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel
</UL>

<P><STRONG><a name="[28]"></a>send_buf</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = send_buf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_put_finish
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_put_claim
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btdrv_send
</UL>

<P><STRONG><a name="[49]"></a>soc_atp_get_hosc_calib</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, soc_atp.o(.text.soc_atp_get_hosc_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L101
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_set_hosc_calib
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_efuse_freq_value
</UL>

<P><STRONG><a name="[2c]"></a>soc_atp_get_rf_calib</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, soc_atp.o(.text.soc_atp_get_rf_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = soc_atp_get_rf_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L101
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipmsg_btc_update_bt_table
</UL>

<P><STRONG><a name="[4e]"></a>soc_atp_set_hosc_calib</STRONG> (Thumb, 136 bytes, Stack size 128 bytes, soc_atp.o(.text.soc_atp_set_hosc_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = soc_atp_set_hosc_calib &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L89
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_write_32bits.constprop.0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_get_hosc_calib
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_efuse_new_value
</UL>

<P><STRONG><a name="[24]"></a>soc_get_hosc_cap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, soc_cmu.o(.text.soc_get_hosc_cap))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_trim_cap
</UL>

<P><STRONG><a name="[4b]"></a>soc_set_hosc_cap</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, soc_cmu.o(.text.soc_set_hosc_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soc_set_hosc_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_ber_test_channel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
</UL>

<P><STRONG><a name="[17]"></a>stub_write_packet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.stub_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_report_result
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
</UL>

<P><STRONG><a name="[50]"></a>uart_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, soc_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>

<P><STRONG><a name="[23]"></a>uart_puts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soc_uart.o(.text.uart_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_puts &rArr; uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[14]"></a>udelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.udelay))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_set_hosc_cap
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L101
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L89
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_write_32bits.constprop.0
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_hardware_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_core_load
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_set_hosc_calib
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>att_cfo_read_test</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ap_autotest_rf_rx.o(.text.att_cfo_read_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = att_cfo_read_test &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_stop
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_bttool_rx_begin
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rx_cfo_test_channel_once
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_check_need_adjust_cfo
</UL>

<P><STRONG><a name="[3]"></a>search_cmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mp_txrx_cmd.o(.text.search_cmd))
<BR>[Address Reference Count : 1]<UL><LI> mp_txrx_cmd.o(.text.mp_btc_rx_init)
</UL>
<P><STRONG><a name="[29]"></a>read_efuse_freq_value</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, compensation.o(.text.read_efuse_freq_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = read_efuse_freq_value &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_get_hosc_calib
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_read
</UL>

<P><STRONG><a name="[2a]"></a>write_efuse_new_value</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, compensation.o(.text.write_efuse_new_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = write_efuse_new_value &rArr; soc_atp_set_hosc_calib &rArr; soc_atp_get_hosc_calib &rArr; _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_set_hosc_calib
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_compensation_write
</UL>

<P><STRONG><a name="[2]"></a>btc_log_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mp_ipmsg.o(.text.btc_log_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = btc_log_handler &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mp_ipmsg.o(.text.mp_btc_log_buf_process)
</UL>
<P><STRONG><a name="[44]"></a>rbuf_get_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mp_ipmsg.o(.text.rbuf_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rbuf_get_data &rArr; rbuf_get_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_finish
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_claim
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_btc_read_hci_data
</UL>

<P><STRONG><a name="[2d]"></a>sys_put_le32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp_ipmsg.o(.text.sys_put_le32))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipmsg_btc_update_bt_table
</UL>

<P><STRONG><a name="[47]"></a>_get_rbuf_space</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rbuf_core.o(.text._get_rbuf_space))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_put_finish
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbuf_get_finish
</UL>

<P><STRONG><a name="[4f]"></a>soc_atp_write_32bits.constprop.0</STRONG> (Thumb, 284 bytes, Stack size 128 bytes, soc_atp.o(.text.soc_atp_write_32bits.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = soc_atp_write_32bits.constprop.0
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_set_hosc_calib
</UL>

<P><STRONG><a name="[15]"></a>_L89</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, soc_atp.o(.text._L89))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L101
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_set_hosc_calib
</UL>

<P><STRONG><a name="[13]"></a>_L101</STRONG> (Thumb, 192 bytes, Stack size 192 bytes, soc_atp.o(.text._L101))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _L101 &rArr; _L89
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_L89
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_get_rf_calib
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_atp_get_hosc_calib
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
