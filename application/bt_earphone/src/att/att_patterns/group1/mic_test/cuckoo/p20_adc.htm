<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\group1\mic_test\cuckoo\p20_adc.elf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\work\codes\zs303a_0308_single\application\bt_earphone\src\att\att_patterns\group1\mic_test\cuckoo\p20_adc.elf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 28 09:49:14 2023
<BR><P>
<H3>Maximum Stack Usage =        636 bytes</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pattern_main &rArr; act_test_right_mic_verify &rArr; mic_input_verify &rArr; ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>pattern_main</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ap_autotest_mic_test.o(.entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = pattern_main &rArr; act_test_right_mic_verify &rArr; mic_input_verify &rArr; ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_right_mic_verify
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_left_mic_verify
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_cfg_start
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b]"></a>act_log_to_pc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_autotest_common.o(.text.act_log_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_log_to_pc &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[d]"></a>act_test_inform_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_autotest_common.o(.text.act_test_inform_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_test_inform_state &rArr; stub_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[3]"></a>act_test_left_mic_verify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ap_autotest_mic_test.o(.text.act_test_left_mic_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = act_test_left_mic_verify &rArr; mic_input_verify &rArr; ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_normal_report
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[f]"></a>act_test_normal_report</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ap_autotest_common.o(.text.act_test_normal_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = act_test_normal_report &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stub_write_packet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_right_mic_verify
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_left_mic_verify
</UL>

<P><STRONG><a name="[11]"></a>act_test_read_arg</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ap_autotest_read_args.o(.text.act_test_read_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = act_test_read_arg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[4]"></a>act_test_right_mic_verify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ap_autotest_mic_test.o(.text.act_test_right_mic_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = act_test_right_mic_verify &rArr; mic_input_verify &rArr; ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_normal_report
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
</UL>

<P><STRONG><a name="[12]"></a>ain_close_transfer_channel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio_record.o(.text.ain_close_transfer_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ain_close_transfer_channel &rArr; att_phy_audio_adc_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_dma_data_analyse
</UL>

<P><STRONG><a name="[14]"></a>ain_open_transfer_channel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, audio_record.o(.text.ain_open_transfer_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[17]"></a>ain_start_transmission</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio_record.o(.text.ain_start_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ain_start_transmission &rArr; dma_cfg_start &rArr; dma_transfer_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_cfg_start
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_adc_fifo_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[18]"></a>att_adc_fifo_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, phy_adc.o(.text.att_adc_fifo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_adc_fifo_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_fifo_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_start_transmission
</UL>

<P><STRONG><a name="[2]"></a>att_buf_printf</STRONG> (Thumb, 412 bytes, Stack size 208 bytes, ap_autotest_print.o(.text.att_buf_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_mic_dgain_translate
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_digital_channel_cfg
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_aux_amic_gain_translate
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_dma_data_analyse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_arg
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[1d]"></a>att_clock_peripheral_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soc_common.o(.text.att_clock_peripheral_disable))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_disable
</UL>

<P><STRONG><a name="[1e]"></a>att_clock_peripheral_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, soc_common.o(.text.att_clock_peripheral_enable))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_cfg
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[13]"></a>att_phy_audio_adc_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phy_adc.o(.text.att_phy_audio_adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_phy_audio_adc_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_clock_peripheral_disable
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_fifo_disable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_reset_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_close_transfer_channel
</UL>

<P><STRONG><a name="[15]"></a>att_phy_audio_adc_enable</STRONG> (Thumb, 912 bytes, Stack size 40 bytes, phy_adc.o(.text.att_phy_audio_adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_mic_dgain_translate
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_input_gain_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_digital_gain_set
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_digital_channel_cfg
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_att_adc_aux_amic_gain_translate
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_reset_peripheral
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_clock_peripheral_enable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_adc_fifo_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_open_transfer_channel
</UL>

<P><STRONG><a name="[16]"></a>att_phy_audio_adc_start</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, phy_adc.o(.text.att_phy_audio_adc_start))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_open_transfer_channel
</UL>

<P><STRONG><a name="[10]"></a>att_printf</STRONG> (Thumb, 54 bytes, Stack size 168 bytes, ap_autotest_extern_function.o(.text.att_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_normal_report
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[1c]"></a>att_reset_peripheral</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soc_common.o(.text.att_reset_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_cfg
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_disable
</UL>

<P><STRONG><a name="[22]"></a>att_vsnprintf</STRONG> (Thumb, 584 bytes, Stack size 68 bytes, ap_autotest_extern_function.o(.text.att_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = att_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[27]"></a>audio_analyse_sample</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ap_autotest_mic_test.o(.text.audio_analyse_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_analyse_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_dma_data_analyse
</UL>

<P><STRONG><a name="[2d]"></a>clk_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, soc_clock.o(.text.clk_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[19]"></a>dma_cfg_start</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, audio_record.o(.text.dma_cfg_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dma_cfg_start &rArr; dma_transfer_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_cfg
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_start_transmission
</UL>

<P><STRONG><a name="[29]"></a>dma_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, audio_record.o(.text.dma_stop))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[25]"></a>dma_transfer_cfg</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, audio_record.o(.text.dma_transfer_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_transfer_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_reset_peripheral
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_clock_peripheral_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_cfg_start
</UL>

<P><STRONG><a name="[28]"></a>is_dma_transfer_complete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio_record.o(.text.is_dma_transfer_complete))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[1b]"></a>k_uptime_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.k_uptime_get))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>

<P><STRONG><a name="[1f]"></a>mdelay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ap_autotest_extern_function.o(.text.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[1]"></a>memset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text.memset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[26]"></a>mic_dma_data_analyse</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ap_autotest_mic_test.o(.text.mic_dma_data_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mic_dma_data_analyse &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_analyse_sample
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_close_transfer_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_input_verify
</UL>

<P><STRONG><a name="[e]"></a>mic_input_verify</STRONG> (Thumb, 316 bytes, Stack size 104 bytes, ap_autotest_mic_test.o(.text.mic_input_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = mic_input_verify &rArr; ain_open_transfer_channel &rArr; att_phy_audio_adc_enable &rArr; _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_dma_data_analyse
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_read_arg
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_inform_state
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dma_transfer_complete
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_cfg_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_start_transmission
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_open_transfer_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_right_mic_verify
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_left_mic_verify
</UL>

<P><STRONG><a name="[2a]"></a>reset_and_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soc_reset.o(.text.reset_and_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c]"></a>stub_write_packet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ap_autotest_extern_function.o(.text.stub_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stub_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_log_to_pc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_normal_report
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_test_inform_state
</UL>

<P><STRONG><a name="[2c]"></a>uart_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, soc_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>

<P><STRONG><a name="[23]"></a>uart_puts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soc_uart.o(.text.uart_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_puts &rArr; uart_init &rArr; reset_and_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_printf
</UL>

<P><STRONG><a name="[2b]"></a>udelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_autotest_extern_function.o(.text.udelay))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_and_enable
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8]"></a>_att_adc_aux_amic_gain_translate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, phy_adc.o(.text._att_adc_aux_amic_gain_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _att_adc_aux_amic_gain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[9]"></a>_att_adc_digital_channel_cfg</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, phy_adc.o(.text._att_adc_digital_channel_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _att_adc_digital_channel_cfg &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[20]"></a>_att_adc_digital_gain_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, phy_adc.o(.text._att_adc_digital_gain_set))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[1a]"></a>_att_adc_fifo_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, phy_adc.o(.text._att_adc_fifo_disable))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_disable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_adc_fifo_enable
</UL>

<P><STRONG><a name="[21]"></a>_att_adc_input_gain_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phy_adc.o(.text._att_adc_input_gain_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _att_adc_input_gain_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>

<P><STRONG><a name="[a]"></a>_att_adc_mic_dgain_translate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, phy_adc.o(.text._att_adc_mic_dgain_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _att_adc_mic_dgain_translate &rArr; att_buf_printf &rArr; att_printf &rArr; att_vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_buf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_phy_audio_adc_enable
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
